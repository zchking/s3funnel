#!/usr/bin/env python
# s3funnel - Multithreaded tool for performing operations on Amazon's S3
# Copyright (c) 2008 Andrey Petrov
#
# This module is part of s3funnel and is released under
# the MIT license: http://www.opensource.org/licenses/mit-license.php

import workerpool
import boto
import logging
import signal

from optparse import OptionParser
from threading import Event

log = logging.getLogger(__name__)
event_stop = threading.Event()

def main():
    # Parse the command line...
    usage="%prog BUCKET OPERATION [OPTIONS] [FILE]...\n\n" + __doc__
    parser = OptionParser(usage)
    parser.add_option("-a", "--aws_key", dest="aws_key", type="string", 
                        help="Overrides AWS_ACCESS_KEY_ID environment variable")
    parser.add_option("-s", "--aws_secret_key", dest="aws_secret_key", type="string",
                        help="Overrides AWS_SECRET_ACCESS_KEY environment variable")
    parser.add_option("-t", "--threads", dest="numthreads", default=1, type="int", metavar="N",
                        help="Number of threads to use (default: 5)")
    parser.add_option("--start_key", dest="start_key", type="string", default=None,
                        help="(`list` only) Start key for list operation")
    parser.add_option("--acl", dest="acl", type="string", default="public-read",
                        help="(`put` only) Set the ACL permission for each file (default: public-read)")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=None,
                        help="Enable verbose output")
    # TODO:
    #   (-T, --timeout) socket timeout
    #   (-i, --input) manifest input file
    
    options, args = parser.parse_args()

    # Check input
    aws_key = os.environ.get("AWS_ACCESS_KEY_ID")
    aws_secret_key = os.environ.get("AWS_SECRET_ACCESS_KEY")
    if options.aws_key:
        aws_key = options.aws_key
    if options.aws_secret_key:
        aws_secret_key = options.aws_secret_key
    if None in [aws_key, aws_secret_key]:
        parser.error("Missing required arguments `aws_key` or `aws_secret_key`")
    if options.numthreads < 1:
        parser.error("`theads` must be at least 1")
    if options.cyclesize < 1:
        parser.error("`cyclesize` must be at least 1")
    if len(args) < 1:
        parser.error("BUCKET not specified")
    bucket = args[0]
    if len(args) < 2:
        parser.error("OPERATION not specified")
    operation = args[1].lower()
    if operation not in ["get", "put", "list", "delete"]:
        parser.error("OPERATION must be one of: get, put, list, or delete")

    # TODO: Rewrite this to use different handlers
    level = logging.INFO
    if options.verbose:
        level = logging.DEBUG
    log.addHandler(logging.StreamHandler())
    log.level = level

    # Get data source
    if len(args) < 3: # Aww, it's a heart
        print "Reading file list from stdin..."
        data = sys.stdin
    else:
        data = args[3:]

    # Setup operation configuration
    config = {'acl': options.acl,
              'start_key': options.start_key,
              }

    # Fire up the thread pool
    log.info("Starting pool with %d threads..." % options.numthreads)
    pool = workerpool.WorkerPool(options.numthreads)

    # Setup interrupt handling
    def shutdown(signum, stack):
        log.warn("Interrupted, shutting down...")
        stop_event.set()
    signal.signal(signal.SIGINT, shutdown)

    # Start feeding jobs into the workers
    for item in data:
        if event_stop.isSet(): break
        j = workerpool.Job() # TODO: Fill this in
        pool.put(j)

    pool.shutdown()

if __name__ == "__main__":
    main()
